BubbleSort

The general definition of a sorted array is any x[i] is going to be <= x[i + 1]; 
x[i] <= x[i + 1] is true for the entire array, we know it is sorted.

    [         ]
    0         N

    start at the 0th position, and goes until the end of the array.
    ask the position next to it, am I larger? if yes, swap positions.
    
    [1,3,7,4,2] // 1 > 3 ? no, do nothing/stay
    [1,3,7,4,2] // 3 > 7 ? no, do nothing/stay
    [1,3,7,4,2] // 7 > 4 ? yes x[i] is larger than x[i+1], swap 4 and 7
    [1,3,4,7,2] // 7 > 2 ? yes x[i] larger than x[i+1], swap 2 and 7
    [1,3,4,2,7] // 2 > 7 ? no, do nothing/stay 
 
    // first iteration done 
    // a singular iteration will always produce the largest item in the last spot
    // this means the next time we bubblesort, we only have to go up to, but not include, the last position in the array.

    we do bubblesort again, but exclude the last position, as it is already sorted. 

    [1,3,4,2,7] // 1 > 3 ? no, do nothing/stay
    [1,3,4,2,7] // 3 > 4 ? no, do nothing/stay
    [1,3,4,2,7] // 4 > 2 ? yes x[i] is larger than x[i+1], swap 4 and 2
    [1,3,2,4,7] // 4 > 7 ? no, do nothing/stay
            | stop here
    // second iteration done
    // we now have the second largest item in the array sorted.
    // next time we bubblesort, we only have to go up to, but not include, the last two positions in the array (arr.length -2)


    [1,3,2,4,7] // 1 > 3 ? no, do nothing/stay
    [1,3,2,4,7] // 3 > 2 ? yes x[i] is larger than x[i+1], swap 3 and 2
    [1,2,3,4,7] // 3 > 4 ? no, do nothing/stay
          | stop here
    // third iteration done
    // the last 3 positions in the array are sorted.
    // next bubbleSort, we only go up to, but including, the last three positions in the array 

    [1,2,3,4,7] // 1 > 2 ? no, do nothing/stay
    [1,2,3,4,7] // 2 > 3 ? no, do nothing/stay
        | stop here

    [1,2,3,4,7] // if array.length is 1, it is sorted.
      | stop here

 Our first iteration, we go over our entire array, N
 Our second iteration, we go over, N - 1
 Our third, N - 2
 Our fourth, N - 3
 until the last element, N - N + 1

This pattern is a familiar and occurs often. Add 1 to 100
    1...100 = 1+100 = 101 
    2...99  = 2+99  = 101
    3...98  = 3+98  = 101
    50...51 = 50+51 = 101

which means 101 * 50
           (N+1)  N/2

Gauss: (N * N + 1) / 2  = the sum of numbers between a range.

Big O: n(n + 1) -> drop constants and insignificant values -> O(N^2) 

Big O: O(N^2)

export default function bubble_sort(arr: number[]): void {
    [           ]
    0           N
    i, i+1, ..  N - 1

// we get progressively smaller as we go for 0 with the case.
// n -1 for the first case, n - 2 for the second case, n - 3, etc...

    for i ... n
        for j ... n - 1 - i   // each time we loop the last item becomes sorted, so we can - i. 
            if(arr[i] > arr[j]) {
                swap(i, j)
            }
}

In reality we are summing all the values.
    First iteration: N - 1 times        ->   for j ... n - 1 - i
    Second: N - 2
    Third: N - 3 
    ...
    ending when the sum of all iterations is N = 1
    (N * N + 1)/ 2 is the formula to sum all the iterations 
-> N^2 

The two loops add N^2 time: 
        for i ... n
        for j ... n - 1 - i

The algorithm to swap is a constant O(1):
        if(arr[i] > arr[j]) {
            let temp = arr[j]
            arr[j] = arr[j + 1]
            arr[j + 1] = temp
        }

Q: Whats a good sorting algorithm for immutable arrays?
A: Immutable arrays are exceptionally poor performing data structure.
Immutability comes with ease of use, but it comes at the cost of space and replicating space.
(Imagine each bubble sort you must create a new copy of N - worst case you must sort all items in the array creating a copy each time)
*Never use immutability and sorting together as the performance may be terrible.*