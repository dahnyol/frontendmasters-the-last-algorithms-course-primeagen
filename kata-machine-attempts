// Linear Search Lists //
export default function linear_search(haystack: number[], needle: number): boolean {
    for (let i = 0; i < haystack.length; ++i) {
        if (haystack[i] === needle) {
            return true;
        }
    }
    return false;
}


// Binary Search List //
export default function bs_list(haystack: number[], needle: number): boolean {
    let low = 0;
    let high = haystack.length;

    do {
        const mid = Math.floor(low + (high - low) / 2);
        const value = haystack[mid];

        if (value === needle) {
            return true;
        } else if (value > needle) {
            high = mid;
        } else {
            low = mid + 1
        }
        
    } while (low < high)
    return false;
}


// Two Crystal Ball Problem //
export default function two_crystal_balls(breaks: boolean[]): number {
    const jumpAmount = Math.floor(Math.sqrt(breaks.length));
    let i = jumpAmount;

    for (; i < breaks.length; i += jumpAmount) {
        if (breaks[i]) {
            break;
        }
    }
    i -= jumpAmount;

    for (let j = 0; j < jumpAmount && i < breaks.length; ++j, ++i) {
        if (breaks[i]) {
            return i;
        }
    }
    return -1
}


// Bubble Sort //
export default function bubble_sort(arr: number[]): void {
    for (let i = 0; i < arr.length; ++i) {
        for (let j = 0; j < arr.length - 1 - i; ++j) {
            if (arr[j] > arr[j + 1]) {
                let temp = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = temp
            }
        }
    }
}


// Queue //
type Node<T> = {
    value: T,
    next?: Node<T>,
}

export default class Queue<T> {
    public length: number;
    private head?: Node<T> 
    private tail?: Node<T> 
    
    constructor() {
        this.head = this.tail = undefined;
        this.length = 0;
    }

    enqueue(item: T): void {
        const node = {value: item} as Node<T>;
        this.length++; 
        
        if (!this.tail) {
            this.tail = this.head = node;
            return;
        }
        this.tail.next = node;
        this.tail = node;
    }   
    deque(): T | undefined {
        if (!this.head) {
            return undefined;
        }

        this.length--; 
        const head = this.head;
        this.head = this.head.next;
        
        // free - garbage collection (not needed in JavaScript)
        head.next = undefined;
        
        return head.value;
    }   
    
    peek(): T | undefined {
        return this.head?.value; 

    }
}


// Stack
export default class Stack<T> {
    public length: number;
 
     
 
    constructor() {
    }
 
    push(item: T): void {
    }
    pop(): T | undefined {
    }
    peek(): T | undefined {
 
    }
}