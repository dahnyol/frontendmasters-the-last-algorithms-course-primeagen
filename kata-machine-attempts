// Linear Search Lists //
export default function linear_search(haystack: number[], needle: number): boolean {
    for (let i = 0; i < haystack.length; ++i) {
        if (haystack[i] === needle) {
            return true;
        }
    }
    return false;
}


// Binary Search List //
export default function bs_list(haystack: number[], needle: number): boolean {
    let low = 0;
    let high = haystack.length;

    do {
        const mid = Math.floor(low + (high - low) / 2);
        const value = haystack[mid];

        if (value === needle) {
            return true;
        } else if (value > needle) {
            high = mid;
        } else {
            low = mid + 1
        }
        
    } while (low < high)
    return false;
}


// Two Crystal Ball Problem //
export default function two_crystal_balls(breaks: boolean[]): number {
    const jumpAmount = Math.floor(Math.sqrt(breaks.length));
    let i = jumpAmount;

    for (; i < breaks.length; i += jumpAmount) {
        if (breaks[i]) {
            break;
        }
    }
    i -= jumpAmount;

    for (let j = 0; j < jumpAmount && i < breaks.length; ++j, ++i) {
        if (breaks[i]) {
            return i;
        }
    }
    return -1
}


// Bubble Sort //
export default function bubble_sort(arr: number[]): void {
    for (let i = 0; i < arr.length; ++i) {
        for (let j = 0; j < arr.length - 1 - i; ++j) {
            if (arr[j] > arr[j + 1]) {
                let temp = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = temp
            }
        }
    }
}


// Queue //
type Node<T> = {
    value: T,
    next?: Node<T>,
}

export default class Queue<T> {
    public length: number;
    private head?: Node<T> 
    private tail?: Node<T> 
    
    constructor() {
        this.head = this.tail = undefined;
        this.length = 0;
    }

    enqueue(item: T): void {
        const node = {value: item} as Node<T>;
        this.length++; 
        
        if (!this.tail) {
            this.tail = this.head = node;
            return;
        }
        this.tail.next = node;
        this.tail = node;
    }   
    deque(): T | undefined {
        if (!this.head) {
            return undefined;
        }

        this.length--; 
        const head = this.head;
        this.head = this.head.next;
        
        // free - garbage collection (not needed in JavaScript)
        head.next = undefined;
        
        return head.value;
    }   
    
    peek(): T | undefined {
        return this.head?.value; 

    }
}


// Stack //
export default class Stack<T> {
    public length: number;
    // define our head and tail
    private head?: Node<T>;
    private tail?: Node<T>;
 
    constructor() {
       this.head = undefined;
       this.length = 0;
    }
 
    push(item: T): void {
       const node = {value:item} as Node<T>;
       this.length++; // bookkeeping
       // if there is no head and returns undefined
       if(!this.head) { 
          // set our head to the node
          this.head = node;
          return;
       }
       // point to the head with our new node
       node.prev = node;
       // point head to the new node
       this.head = node;
    }
    
    pop(): T | undefined {
       this.length = Math.max(0, this.length - 1); // countdown, if at 0 stay at 0
       if(this.length === 0) {
          const head = this.head;
          this.head = undefined;
          return head?.value;
       }
       // detach the head
       // save pointer to head
       const head = this.head as Node<T>;
       this.head = head.prev;
       // update head to point back to the previous
 
       // free in other langauges but not needed in JavaScript
       return head.value;
       // return value
    }
 
    peek(): T | undefined {
       return this.head?.value;
    }
}

type Node<T> = {
    value: T,
    next?: Node<T>,
    prev?: Node<T>,
}


// Doubly Linked List //
export default class DoublyLinkedList<T> {
    public length: number;
    private head = undefined;
    
    
    constructor() {
        this.length = 0;
    }

    prepend(item: T): void {

    }
    insertAt(item: T, idx: number): void {

    }
    append(item: T): void {

    }
    remove(item: T): T | undefined {

    }
    get(idx: number): T | undefined {
        // grab our head store in var curr
        let curr = this.head;
        // loop as long as i < index and there is something there
        for (let i = 0; i < idx && curr; ++i) {
            // walk forward, one at a time , linear operation
            curr = curr.next;
        }
        // get/show our the passed in idx value
        return curr?.value;
    }
    removeAt(idx: number): T | undefined {

    }
}


// Maze Solver //
const dir = [
    [-1, 0], // left
    [1, 0], // right
    [0, -1], // down
    [0, 1], // up
];

function walk(maze: string[], wall: string, curr: Point, end: Point, seen: boolean[][], path: Point[]): boolean {
    // 1. Base Case
    // off the map
    if (curr.x < 0 || curr.x >= maze[0].length ||
        curr.y < 0 || curr.y >= maze[0].length ) {
            return false;
        }
    // on a wall
    if (maze[curr.y][curr.x] === wall) {
            return false;
        }
    // its the end
    if (curr.x === end.x && curr.y === end.y) {
            path.push(end);     // we have to add/push our last/ending tile
            return true;
        }
    // we have seen the tile before
    if (seen[curr.y][curr.x]) {
        return false;
    }

    // 3 recurse steps
    // pre
    seen[curr.y][curr.x] = true; 
    path.push(curr);
    // recurse
    for (let i = 0; i < dir.length; ++i) {
        const [x, y] = dir[i]
        if (walk(maze, wall, {
            x: curr.x + x,
            y: curr.y + y,
        }, end, seen, path)) {
            return true;    // if walk is successful, meaning we found out end, return true and stop recursing.
        }
    }
    // post
    path.pop();

    return false;   // if we recurse, reach the end and we did not find our current position, it is false.
}

export default function solve(maze: string[], wall: string, start: Point, end: Point): Point[] {
    const seen: boolean[][] = [];
    const path: Point[] = [];

    for (let i = 0; i < maze.length; ++i) {
        seen.push(new Array(maze[0].length).fill(false));   // our seen matrix with all false values to keep track of where we have been before.
    }

    walk(maze, wall, start, end, seen, path);
    
    return path;
}